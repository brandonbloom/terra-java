local util = require "terra-java/util"
local declare = require "terra-java/declare"

local P = {exports = {}}

function P.implement(Class, Bases, members)

  print("!!", Class)
  local package_name = "XXX" --XXX split/join until last period
  local class_name = "YYY" --XXX split/join after last period

  --TODO: mkdir -p
  local path = ("./obj/%s/%s.java"):format(package_name, class_name)
  local w = assert(io.open(path, "w"))

  local function pr(fmt, ...)
    return w:write(fmt:format(...))
  end

  pr("// Generated by Terra-Java - DO NOT MODIFY\n\n")
  pr("package %s;\n\n", package_name)
  pr("class %s {\n", class_name)

  for k, v in pairs(members) do
    local kind = terralib.type(v)
    if kind == "string" then
      pr(v)
    elseif kind == "terratype" then
      pr("field %s = %s\n", k, v)
    elseif kind == "terrafunction" then
      pr("method %s = %s\n", k, v)
    else
      util.errorf("Unexpected type for member: %s (%s, %s)", kind, k, v)
    end
  end

  pr("\n}\n");
  w:close()

end

return P
